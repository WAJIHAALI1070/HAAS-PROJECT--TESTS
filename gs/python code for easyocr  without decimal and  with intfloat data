import os
import cv2
import numpy as np
import easyocr
import matplotlib.pyplot as plt


def test_easyocr_basic(img_path):
    reader = easyocr.Reader(['en'])
    result = reader.readtext(img_path)
    print("Basic OCR Result:", result)


def test_easyocr_zoom(img_path, scale=2.0):
    img = cv2.imread(img_path)
    height, width = img.shape[:2]
    img_resized = cv2.resize(img, (int(width * scale), int(height * scale)))
    reader = easyocr.Reader(['en'])
    result = reader.readtext(img_resized)
    print("Zoomed OCR Result:", result)


def test_easyocr_threshold(img_path, threshold_value=128):
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    _, thresh = cv2.threshold(img, threshold_value, 255, cv2.THRESH_BINARY)
    reader = easyocr.Reader(['en'])
    result = reader.readtext(thresh)
    print("Thresholded OCR Result:", result)


def test_easyocr_threshold_clahe(img_path):
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    img_clahe = clahe.apply(img)
    reader = easyocr.Reader(['en'])
    result = reader.readtext(img_clahe)
    print("CLAHE OCR Result:", result)


def test_easyocr_with_brightening_and_clahe(img_path, gamma=1.2, clip_limit=2.0, tile_grid_size=(8, 8),
                                            threshold_value=80):
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Brightening (Gamma Correction)
    invGamma = 1.0 / gamma
    table = np.array([(i / 255.0) ** invGamma * 255 for i in np.arange(0, 256)]).astype("uint8")
    img_bright = cv2.LUT(img, table)

    # CLAHE
    clahe = cv2.createCLAHE(clipLimit=clip_limit, tileGridSize=tile_grid_size)
    img_clahe = clahe.apply(img_bright)

    # Thresholding
    _, img_thresh = cv2.threshold(img_clahe, threshold_value, 255, cv2.THRESH_BINARY)

    reader = easyocr.Reader(['en'])
    result = reader.readtext(img_thresh)
    print("Brightened + CLAHE + Threshold OCR Result:", result)


def get_pixel_values(img_path):
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    print("Image Shape:", img.shape)  # (height, width)

    # Display the pixel values
    for y in range(0, img.shape[0], 50):  # Adjust step size to reduce output
        for x in range(0, img.shape[1], 50):
            print(f"Pixel ({x}, {y}): {img[y, x]}")  # Access pixel value

    return img


if __name__ == '__main__':
    dir_path = os.path.dirname(os.path.abspath(__file__))
    img_path = os.path.join(dir_path, 'GS.jpg')

    get_pixel_values(img_path)
    test_easyocr_basic(img_path)
    test_easyocr_zoom(img_path)
    test_easyocr_threshold(img_path)
    test_easyocr_threshold_clahe(img_path)
    test_easyocr_with_brightening_and_clahe(img_path, gamma=1.2, clip_limit=2.0, tile_grid_size=(8, 8),
                                            threshold_value=80)
